import sympy
import numpy as np
import re
import matplotlib.pyplot as plt
from matplotlib.widgets import TextBox
from matplotlib.widgets import Button
import ipywidgets as widgets
from lab_utils_backprop import *

plt.close("all")
plt_network(config_nw0, "./images/C2_W2_BP_network0.PNG")
# Uncomment the line below to see the graph and solve it
# plt.show()


print("Let's do the forward propagation moving from left to right to solve above graph")
w = 3
a = 2+3*w
J = a**2
print(f"a = {a}, J = {J}")

# This is arithmatic calculation when a goes up by 0.001 (epsilon)
a_epsilon = a + 0.001       # a epsilon
J_epsilon = a_epsilon**2    # J_epsilon
k = (J_epsilon - J)/0.001   # difference divided by epsilon
print(f"J = {J}, J_epsilon = {J_epsilon}, dJ_da ~= k = {k} ")
print("^ this means when a goes up by epsilon, J goes up by k * epsilon. In this case it's ~22, that's why new J is now 121.022000...")

# Now let's do the same thing using sympy
sw,sJ,sa = symbols('w,J,a')
sJ = sa**2
print(f"sj = {sJ}")
sJ.subs([(sa,a)])
dJ_da = diff(sJ, sa)
print(f"dJ_da = {dJ_da}")


print("\n\nThis is backward propagation moving from right to left")
# This is arithmatic calculation when a goes up by 0.001 (epsilon)
print("\n\n when w goes up by epsilon let's calculate how it impacts a i.e. da_dw")
w_epsilon = w + 0.001       # a  plus a small value, epsilon
a_epsilon = 2 + 3*w_epsilon
k = (a_epsilon - a)/0.001   # difference divided by epsilon
print(f"a = {a}, a_epsilon = {a_epsilon}, da_dw ~= k = {k} ")

#Now let's do the same thing using sympy
print("Same thing using sympy:")
sa = 2 + 3*sw
print(f"sa = {sa}")
da_dw = diff(sa,sw)
print(f"da_dw = {da_dw}")
dJ_dw = da_dw * dJ_da
print(f"dJ_dw = {dJ_dw}")

# when w goes up by epsilon
print("\n\n when w goes up by epsilon let's calculate how it impacts J i.e. dJ_dw")
w_epsilon = w + 0.001       # a  plus a small value, epsilon
a_epsilon = 2 + 3*w_epsilon
k = (a_epsilon - a)/0.001   # difference divided by epsilon
print(f"a = {a}, a_epsilon = {a_epsilon}, da_dw ~= k = {k} ")


# Computational Graph
print("\n\nComputational Graph")
plt.close("all")
plt_network(config_nw1, "./images/C2_W2_BP_network1.PNG")
# uncomment below to show the graph and solve it
# plt.show()

#Solution below is done by hand
# Inputs and parameters
x = 2
w = -2
b = 8
y = 1
# calculate per step values   
c = w * x
a = c + b
d = a - y
J = d**2/2
print(f"J={J}, d={d}, a={a}, c={c}")

print("\nArithmatic solve for dJ_dd")
d_epsilon = d + 0.001
J_epsilon = d_epsilon**2/2
k = (J_epsilon - J)/0.001   # difference divided by epsilon
print(f"J = {J}, J_epsilon = {J_epsilon}, dJ_dd ~= k = {k} ")

print("\Sympy solve for dJ_dd")
sx,sw,sb,sy,sJ = symbols('x,w,b,y,J')
sa, sc, sd = symbols('a,c,d')
sJ = sd**2/2
print(f"sJ = {sJ}")
sJ.subs([(sd,d)])
dJ_dd = diff(sJ, sd)
print(f"dJ_dd = {dJ_dd}")

print("\nArithmatic solve for dd_da")
a_epsilon = a + 0.001         # a  plus a small value
d_epsilon = a_epsilon - y
k = (d_epsilon - d)/0.001   # difference divided by epsilon
print(f"d = {d}, d_epsilon = {d_epsilon}, dd_da ~= k = {k} ")

print("\Sympy solve for dd_da")
sd = sa - sy
print(f"sd = {sd}")
dd_da = diff(sd,sa)
print(f"dd_da = {dd_da}")

print("\nArithmatic solve for dJ_da")
a_epsilon = a + 0.001
d_epsilon = a_epsilon - y
J_epsilon = d_epsilon**2/2
k = (J_epsilon - J)/0.001   
print(f"J = {J}, J_epsilon = {J_epsilon}, dJ_da ~= k = {k} ")

print("\Sympy solve for dJ_da")
dJ_da = dd_da * dJ_dd
print(f"dJ_da = {dJ_da}")


print("\nArithmatic solve for dJ_dw")
J_epsilon = ((w+0.001)*x+b - y)**2/2
k = (J_epsilon - J)/0.001  
print(f"J = {J}, J_epsilon = {J_epsilon}, dJ_dw ~= k = {k} ")

print("\Sympy solve for dJ_dw")
# calculate the local derivatives da_dc, da_db
sa = sc + sb
sa
da_dc = diff(sa,sc)
da_db = diff(sa,sb)
print(f"da_dc = {da_dc}, da_db = {da_db}")

dJ_dc = da_dc * dJ_da
dJ_db = da_db * dJ_da
print(f"dJ_dc = {dJ_dc},  dJ_db = {dJ_db}")

# calculate the local derivative
sc = sw * sx
sc
dc_dw = diff(sc,sw)
print(f"dc_dw = {dc_dw}")

dJ_dw = dc_dw * dJ_dc
print(f"dJ_dw = {dJ_dw}")
print(f"dJ_dw = {dJ_dw.subs([(sd,d),(sx,x)])}")
